import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

# Load data
data = pd.read_csv('your_data.csv', index_col='date', parse_dates=True)
data = data.asfreq('MS')  # Ensure data frequency is set correctly, e.g., Monthly Start

# Stationarity Test
result = adfuller(data['column_of_interest'])
print('ADF Statistic:', result[0])
print('p-value:', result[1])

# Specify the model
model = SARIMAX(data['column_of_interest'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 12), exog=data['exogenous_var'])

# Fit the model
model_fit = model.fit(disp=False)

# Diagnostics
model_fit.plot_diagnostics(figsize=(15, 12))
plt.show()

# Backtesting
data['forecast'] = model_fit.predict(start='start_date', end='end_date', dynamic=True)

# Forecasting
forecast = model_fit.get_forecast(steps=12)
data['forecast'] = forecast.predicted_mean

# Impulse Response Function
irf = model_fit.impulse_responses(steps=12)
plt.figure(figsize=(10, 4))
plt.plot(irf)
plt.title('Impulse Response Function')
plt.xlabel('Time Steps')
plt.ylabel('Response')
plt.show()

# Visualization
plt.figure(figsize=(12, 6))
plt.plot(data['column_of_interest'], label='Actual')
plt.plot(data['forecast'], label='Forecasted', color='red')
plt.legend()
plt.show()

import itertools
from statsmodels.tsa.statespace.sarimax import SARIMAX

p = d = q = range(0, 3)  # AR, I, MA parameters
seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]  # Seasonal parameters

best_aic = float("inf")
best_params = None

for param in itertools.product(p, d, q):
    for seasonal_param in seasonal_pdq:
        try:
            model = SARIMAX(data, order=param, seasonal_order=seasonal_param,
                            enforce_stationarity=False, enforce_invertibility=False)
            results = model.fit()
            if results.aic < best_aic:
                best_aic = results.aic
                best_params = (param, seasonal_param)
        except:
            continue

print('Best SARIMAX{}x{}12 - AIC:{}'.format(best_params[0], best_params[1], best_aic))
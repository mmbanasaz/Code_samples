import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.metrics import mean_squared_error

# Simulate some data
np.random.seed(42)
n_samples = 100
n_features = 50

# Generate random features
X = np.random.randn(n_samples, n_features)

# Generate the true coefficients with only a few non-zero values
true_coeffs = np.zeros(n_features)
true_coeffs[:5] = np.random.randn(5)

# Generate the target variable with some noise
y = X @ true_coeffs + np.random.randn(n_samples) * 0.1

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Linear Regression (without regularization) - Overfitting example
lin_reg = LinearRegression()
lin_reg.fit(X_train, y_train)
y_train_pred = lin_reg.predict(X_train)
y_test_pred = lin_reg.predict(X_test)

print("Linear Regression without Regularization")
print(f"Training MSE: {mean_squared_error(y_train, y_train_pred):.4f}")
print(f"Testing MSE: {mean_squared_error(y_test, y_test_pred):.4f}")

# Ridge Regression
ridge_reg = Ridge(alpha=1.0)
ridge_reg.fit(X_train, y_train)
y_train_ridge_pred = ridge_reg.predict(X_train)
y_test_ridge_pred = ridge_reg.predict(X_test)

print("\nRidge Regression")
print(f"Training MSE: {mean_squared_error(y_train, y_train_ridge_pred):.4f}")
print(f"Testing MSE: {mean_squared_error(y_test, y_test_ridge_pred):.4f}")

# Lasso Regression
lasso_reg = Lasso(alpha=0.1)
lasso_reg.fit(X_train, y_train)
y_train_lasso_pred = lasso_reg.predict(X_train)
y_test_lasso_pred = lasso_reg.predict(X_test)

print("\nLasso Regression")
print(f"Training MSE: {mean_squared_error(y_train, y_train_lasso_pred):.4f}")
print(f"Testing MSE: {mean_squared_error(y_test, y_test_lasso_pred):.4f}")

# Plot the coefficients for comparison
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.stem(lin_reg.coef_, use_line_collection=True)
plt.title('Linear Regression Coefficients')
plt.xlabel('Feature index')
plt.ylabel('Coefficient value')

plt.subplot(1, 3, 2)
plt.stem(ridge_reg.coef_, use_line_collection=True)
plt.title('Ridge Regression Coefficients')
plt.xlabel('Feature index')
plt.ylabel('Coefficient value')

plt.subplot(1, 3, 3)
plt.stem(lasso_reg.coef_, use_line_collection=True)
plt.title('Lasso Regression Coefficients')
plt.xlabel('Feature index')
plt.ylabel('Coefficient value')

plt.tight_layout()
plt.show()
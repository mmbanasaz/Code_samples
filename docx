import statsmodels.api as sm
import pandas as pd
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.oxml.ns import qn

# Sample data
data = {
    'X1': [1, 2, 3, 4, 5],
    'X2': [2, 3, 4, 5, 6],
    'Y': [1, 2, 1, 2, 1]
}
df = pd.DataFrame(data)

# Define independent variables (add a constant term)
X = sm.add_constant(df[['X1', 'X2']])
Y = df['Y']

# Perform regression
model = sm.OLS(Y, X).fit()
summary = model.summary()

# Create a Word document
doc = Document()

# Add title and formatting
doc.add_heading('Regression Results', level=1)
doc.styles['Normal'].font.name = 'Times New Roman'
doc.styles['Normal']._element.rPr.rFonts.set(qn('w:eastAsia'), 'Times New Roman')

# Add summary text
summary_text = str(summary)
doc.add_paragraph(summary_text)

# Save the document
doc.save('academic_regression_results.docx')

# Function to add formatted table to the document
def add_regression_table(doc, summary):
    # Extract summary tables
    summary_tables = summary.tables[1]
    # Add a heading for the table
    doc.add_heading('Detailed Regression Table', level=2)

    # Create a table in the Word document
    table = doc.add_table(rows=1, cols=len(summary_tables.columns))
    table.style = 'Table Grid'

    # Add the header row
    hdr_cells = table.rows[0].cells
    for i, column in enumerate(summary_tables.columns):
        hdr_cells[i].text = column
        run = hdr_cells[i].paragraphs[0].runs[0]
        run.bold = True

    # Add data rows
    for index, row in summary_tables.iterrows():
        row_cells = table.add_row().cells
        for i, value in enumerate(row):
            row_cells[i].text = str(value)

    # Format the table
    for row in table.rows:
        for cell in row.cells:
            cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            cell.paragraphs[0].runs[0].font.size = Pt(10)

# Create another Word document for detailed results
doc_detailed = Document()
doc_detailed.add_heading('Regression Results', level=1)
doc_detailed.styles['Normal'].font.name = 'Times New Roman'
doc_detailed.styles['Normal']._element.rPr.rFonts.set(qn('w:eastAsia'), 'Times New Roman')

# Add summary text
doc_detailed.add_paragraph(summary_text)

# Add detailed regression table
add_regression_table(doc_detailed, model.summary2())

# Save the detailed document
doc_detailed.save('detailed_academic_regression_results.docx')